require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  describe 'GET #index' do
    it 'returns a success response' do
      get :index
      expect(response).to be_successful
    end

    it 'render the :index template' do
      get :index
      expect(response).to render_template :index
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new
      expect(response).to be_successful
    end

    it 'render the :new template' do
      get :new
      expect(response).to render_template :new
    end
  end

  describe 'GET #edit' do
    let(:user) { create(:user) }

    it 'returns a success response' do
      get :edit, params: { id: user.to_param }
      expect(response).to be_successful
    end

    it 'render the :edit template' do
      get :edit, params: { id: user.to_param }
      expect(response).to render_template :edit
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new User' do
        expect {
          post :create, params: { 'user' => { 'name' => 'fugafuga', 'email' => 'hugahuga@fuga.com' }}
        }.to change(User, :count).by(1)
      end

      it 'redirects to the created user' do
        post :create, params: { 'user' => { 'name' => 'fugafuga', 'email' => 'hugahuga@fuga.com' }}
        expect(response).to redirect_to(User.last)
      end
    end

    context 'with invalid params' do
      it 'creates a new User' do
        expect {
          post :create, params: { 'user' => { 'name' => '', 'email' => '' }}
        }.to change(User, :count).by(0)
      end

      it 'returns a success response (i.e. to display the "new" template)' do
        post :create, params: { 'user' => { 'name' => '', 'email' => ''}}
        expect(response).to be_successful
      end

      it 'render the :new template' do
        post :create, params: { 'user' => { 'name' => '', 'email' => ''}}
        expect(response).to render_template :new
      end
    end
  end

  describe 'PUT #update' do
    let!(:user) { create(:user) }

    context 'with valid params' do
      it 'updates the requested user does not change the num of data' do
        expect {
          put :update, params: { id: user.to_param, 'user' => { 'name' => 'hogehoge' }}
        }.to change(User, :count).by(0)
      end

      it 'redirects to the user' do
        put :update, params: { id: user.to_param, 'user' => { 'name' => 'hogehoge' }}
        expect(response).to redirect_to(user)
      end
    end

    context 'with invalid params' do
      it 'returns a success response (i.e. to display the "edit" template)' do
        put :update, params: { id: user.to_param, 'user' => { 'name' => '', 'email' => ''}}
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE #destroy' do
    let!(:user) { create(:user) }

    it 'destroys the requested user' do
      expect {
        delete :destroy, params: { id: user.to_param }
      }.to change(User, :count).by(-1)
    end

    it 'redirects to the users list' do
      delete :destroy, params: { id: user.to_param }
      expect(response).to redirect_to(users_url)
    end
  end
end

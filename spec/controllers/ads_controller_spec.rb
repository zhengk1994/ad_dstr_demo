require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe AdsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Ad. As you add validations to Ad, be sure to
  # adjust the attributes here as well.
  #let(:valid_attributes) {
    #skip("Add a hash of attributes valid for your model")
  #}

  #let(:invalid_attributes) {
    #skip("Add a hash of attributes invalid for your model")
  #}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AdsController. Be sure to keep this updated too.
  #let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response' do
      get :index
      expect(response).to be_successful
    end

    it 'render the :index template' do
      get :index
      expect(response).to render_template :index
    end
  end

  # describe "GET #show" do
  #   it "returns a success response" do
  #     get :show
  #     expect(response).to be_successful
  #   end
  # end
  #
  # describe 'GET #new' do
  #   it 'returns a success response' do
  #     get :new
  #     expect(response).to be_successful
  #   end
  #
  #   it 'render the :new template' do
  #     get :new
  #     expect(response).to render_template :new
  #   end
  # end

  # describe 'GET #edit' do
  #   let(:ad) { create(:ad) }
  #
  #   it 'returns a success response' do
  #     get :edit, params: { id: ad.to_param }
  #     #expect(response).to be_successful
  #     expect(@ad.errors[:price]).to be_present
  #   end
  #
  #   it 'render the :edit template' do
  #     get :edit, params: { id: ad.to_param }
  #     expect(response).to render_template :edit
  #   end
  # end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Ad" do
        expect {
          post :create, params: { 'ad' => { 'body' => '1234', 'price' => '30', 'url' => 'zhengk1994@gmail.com' }}
        }.to change(Ad, :count).by(1)
      end

      it "redirects to the created ad" do
        post :create, params: { 'ad' => { 'body' => '1234', 'price' => '30', 'url' => 'zhengk1994@gmail.com' }}
        expect(response).to redirect_to(Ad.last)
      end
    end

    context 'with invalid params' do
      it 'creates a new Ad' do
        expect {
          post :create, params: { 'ad' => { 'body' => '', 'price' => '30', 'url' => '' }}
        }.to change(Ad, :count).by(0)
      end

      it 'returns a success response (i.e. to display the "new" template)' do
        post :create, params: { 'ad' => { 'body' => '', 'price' => '30', 'url' => '' }}
        expect(response).to be_successful
        #expect(@ad.errors[:price]).to be_present
      end

      it 'render the :new template' do
        post :create, params: { 'ad' => { 'body' => '', 'price' => '30', 'url' => '' }}
        expect(response).to render_template :new
      end
    end
  end

  # describe 'PUT #update' do
  #   let!(:ad) { create(:ad) }
  #
  #   context 'with valid params' do
  #     it 'updates the requested user does not change the num of data' do
  #       expect {
  #         put :update, params: { id: ad.to_param, 'ad' => { 'body' => '1111111' }}
  #       }.to change(Ad, :count).by(0)
  #     end
  #
  #     it 'redirects to the ad' do
  #       put :update, params: { id: ad.to_param, 'ad' => { 'body' => '1111111' }}
  #       expect(response).to redirect_to(ad)
  #     end
  #   end
  #
  #   context 'with invalid params' do
  #     it 'returns a success response (i.e. to display the "edit" template)' do
  #       put :update, params: { id: ad.to_param, 'ad' => { 'body' => '', 'price' => '30', 'url' => ''}}
  #       expect(response).to be_successful
  #       #expect(@ad.errors[:price]).to be_present
  #     end
  #   end
  # end



  # describe 'DELETE #destroy' do
  #   let!(:ad) { create(:ad) }
  #
  #   it 'destroys the requested ad' do
  #     expect {
  #       delete :destroy, params: { id: ad.to_param }
  #     }.to change(Ad, :count).by(-1)
  #   end
  #
  #   it 'redirects to the ads list' do
  #     delete :destroy, params: { id: ad.to_param }
  #     expect(response).to redirect_to(ads_url)
  #   end
  # end

end

#describe "GET #index" do

#  it "returns a success response" do

#    Ad.create! valid_attributes
    #get :index, params: {}, session: valid_session
    #expect(response).to be_successful
  #end
#end
